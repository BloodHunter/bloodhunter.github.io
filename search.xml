<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>InfluxDB简介</title>
      <link href="/2019/02/16/influxdb-jian-jie/"/>
      <url>/2019/02/16/influxdb-jian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="InfluxDB简介"><a href="#InfluxDB简介" class="headerlink" title="InfluxDB简介"></a>InfluxDB简介</h2><p>InfluxDB是一个时序型数据库，用于高性能的查询与存储时序型数据。目前，InfluxDB被广泛的用于监控系统中。InfluxDB与Grafana结合，可以为用户带来清晰明了的监控面板。</p><h2 id="InfluxDB安装"><a href="#InfluxDB安装" class="headerlink" title="InfluxDB安装"></a>InfluxDB安装</h2><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><pre><code>brew updatebrew install influxdbinfluxd -config /usr/local/etc/influxdb.conf   //启动influxdb</code></pre><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><pre><code>sudo apt-get update &amp;&amp; sudo apt-get install influxdbsudo service influxdb start</code></pre><h2 id="InfluxDB相关概念"><a href="#InfluxDB相关概念" class="headerlink" title="InfluxDB相关概念"></a>InfluxDB相关概念</h2><h3 id="database"><a href="#database" class="headerlink" title="database"></a>database</h3><p>数据库，包含用户，数据保留策略以及时序型数据。类似关系型数据库中数据库</p><h3 id="measurement"><a href="#measurement" class="headerlink" title="measurement"></a>measurement</h3><p>具有相同tag以及filed的数据集合</p><h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><p>influxdb使用键值对key-value的形式来保存数据，tag是具有索引的数据</p><h3 id="filed"><a href="#filed" class="headerlink" title="filed"></a>filed</h3><p>influxdb中用来存储具体数值，也是key-value的形式，与tag相比，filed没有索引，因此用filed来过滤查询数据性能会很低</p><h3 id="point"><a href="#point" class="headerlink" title="point"></a>point</h3><p>tag + filed + timestamp = point，类似于关系型数据库中的一行数据(row)</p><h3 id="continuous-query-CQ"><a href="#continuous-query-CQ" class="headerlink" title="continuous query(CQ)"></a>continuous query(CQ)</h3><p>InfluxDB自动并且周期性执行的SQL语句，主要用来自动聚合数据，提供查询性能</p><h3 id="retention-policy-RP"><a href="#retention-policy-RP" class="headerlink" title="retention policy(RP)"></a>retention policy(RP)</h3><p>保留数据策略，每一个RP都会设置一个数据保留期限(duration)，对于超过期限的数据，InfluxDB会自动删除。例如RP设置的期限为7天，则7天之前的数据都会被删除</p><h3 id="series"><a href="#series" class="headerlink" title="series"></a>series</h3><p>在同一个measurement，具有相同的retention policy以及相同tag的数据集合</p><h3 id="shard"><a href="#shard" class="headerlink" title="shard"></a>shard</h3><p>分片包含了实际加密和压缩的数据，一个分片对应了磁盘上的一个TSM文件</p><h2 id="InfluxDB与关系型数据库的对比"><a href="#InfluxDB与关系型数据库的对比" class="headerlink" title="InfluxDB与关系型数据库的对比"></a>InfluxDB与关系型数据库的对比</h2><h3 id="相关概念对比"><a href="#相关概念对比" class="headerlink" title="相关概念对比"></a>相关概念对比</h3><table><thead><tr><th>InfluxDB</th><th>关系型数据库</th></tr></thead><tbody><tr><td>database</td><td>database</td></tr><tr><td>measurement</td><td>table</td></tr><tr><td>tag</td><td>primary-key</td></tr><tr><td>filed</td><td>column</td></tr><tr><td>point</td><td>row</td></tr></tbody></table><p>下面一张表，可以对应到InfluxDB的measurement中<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g08cg9a683j30su076q44.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g08chjy7isj30xk08st9w.jpg" alt=""></p><h2 id="InfluxDB-Quick-start"><a href="#InfluxDB-Quick-start" class="headerlink" title="InfluxDB Quick start"></a>InfluxDB Quick start</h2><pre><code>//1. 启动influxd</code></pre><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g08co9olscj327c0icaff.jpg" alt=""></p><pre><code>//2. 进入命令行influx -precision rfc3339</code></pre><p>-precision 用来指定时间戳的显示格式<br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g08cpc9a2fj30x006yjsu.jpg" alt=""></p><pre><code>//3. 查看databaseshow databases;</code></pre><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g08crkttvjj310e09sjs2.jpg" alt=""></p><pre><code>//4. 使用databaseuse media_quality//5. 查看measurementshow measurements</code></pre><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g08cthchcvj30l609qmy4.jpg" alt=""></p><pre><code>//6. 查询数据select * from [measurement] where time &gt; now() - 5m limit 10</code></pre><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://docs.influxdata.com/influxdb/v1.7/about_the_project/" target="_blank" rel="noopener">InfluDB官网</a>                </li></ul>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> influxDB </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>logback配置</title>
      <link href="/2019/02/01/logback-pei-zhi/"/>
      <url>/2019/02/01/logback-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="logback配置文件加载顺序"><a href="#logback配置文件加载顺序" class="headerlink" title="logback配置文件加载顺序"></a>logback配置文件加载顺序</h2><ol><li>在 classpath 中寻找 logback-test.xml文件</li><li>如果找不到 logback-test.xml，则在 classpath 中寻找 logback.groovy 文件</li><li>如果找不到 logback.groovy，则在 classpath 中寻找 logback.xml文件</li><li>如果上述的文件都找不到，则 logback 会使用 JDK 的 SPI 机制查找 META-INF/services/ch.qos.logback.classic.spi.Configurator 中的 logback 配置实现类，这个实现类必须实现 Configuration 接口，使用它的实现来进行配置</li><li>如果上述操作都不成功，logback 就会使用它自带的 BasicConfigurator 来配置，并将日志输出到 console<h2 id="logback配置结构"><a href="#logback配置结构" class="headerlink" title="logback配置结构"></a>logback配置结构</h2> configuration<pre><code> - appender - logger - root </code></pre></li></ol><p>下面详细说明各个标签的详细配置</p><h2 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h2><pre><code>&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;      &lt;property name=&quot;glmapper-name&quot; value=&quot;glmapper-demo&quot; /&gt;     &lt;contextName&gt;${glmapper-name}&lt;/contextName&gt;     &lt;appender&gt;        //xxxx    &lt;/appender&gt;       &lt;logger&gt;        //xxxx    &lt;/logger&gt;    &lt;root&gt;                    //xxxx    &lt;/root&gt;  &lt;/configuration&gt;   </code></pre><table><thead><tr><th>属性名称</th><th>属性说明</th></tr></thead><tbody><tr><td>scan</td><td>为true时，配置文件变化后会自动重新加载，默认设置为true</td></tr><tr><td>scanPeriod</td><td>扫描配置文件的时间间隔，如果没有给出时间单位，默认为ms。当scan为true，此属性生效，默认值为1m</td></tr><tr><td>debug</td><td>为true时，打印logback内部的日志，默认为false</td></tr></tbody></table><h2 id="contextName"><a href="#contextName" class="headerlink" title="contextName"></a>contextName</h2><pre><code>&lt;contextName&gt;${glmapper-name}&lt;/contextName&gt; </code></pre><p>默认的contextName为default，可以通过设置contextName来区分不同应用程序的日志</p><h2 id="property"><a href="#property" class="headerlink" title="property"></a>property</h2><pre><code>&lt;property name=&quot;glmapper-name&quot; value=&quot;glmapper-demo&quot; /&gt;</code></pre><p>property标签用来定义变量，具有如下两个属性</p><table><thead><tr><th>属性名称</th><th>属性说明</th></tr></thead><tbody><tr><td>name</td><td>变量名称</td></tr><tr><td>value</td><td>变量值</td></tr></tbody></table><p>定义变量之后，可以通过表示式来使用变量</p><pre><code>${name}</code></pre><h2 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h2><p>用来设置某一个包或者具体的某一个类的日志打印级别以及指定appender。</p><pre><code>&lt;logger name=&quot;com.meitu.alarm&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;</code></pre><table><thead><tr><th>属性名称</th><th>属性说明</th></tr></thead><tbody><tr><td>name</td><td>logger名称，必填，与LoggerFactory.getLogger(“name”)中的name对应</td></tr><tr><td>level</td><td>level的取值可以为TRACE, DEBUG, INFO, WARN, ERROR, ALL, OFF</td></tr><tr><td>additivity</td><td>是否向父类继续上报日志，如果设置为true，则日志会向上传递，父类也会打印该日志</td></tr></tbody></table><p><logger>标签只有一个子标签<appender-ref>，用来绑定对应的appender</appender-ref></logger></p><h2 id="appender"><a href="#appender" class="headerlink" title="appender"></a>appender</h2><p>appender用来标识日志输出的格式以及日志输出地点，可以是控制台，文件</p><pre><code>&lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;&lt;/appender&gt;</code></pre><table><thead><tr><th>属性名称</th><th>属性说明</th></tr></thead><tbody><tr><td>name</td><td>appender的名称</td></tr><tr><td>class</td><td>appender的实现类名称</td></tr></tbody></table><appender> 标签下可以包含至多一个 <layout>，0个或多个 <encoder>，0个或多个 <filter><br><br>以下是几种常见的appender<br>### Console<br>将日志输出到控制台中<br><br>    <appender name="console" class="ch.qos.logback.core.ConsoleAppender"><br>        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"><br>            <pattern>%d{YY-MM-dd HH:mm:ss.SSS} %-5level %logger{36} - %msg%n</pattern><br>        </encoder><br>    </appender><h3 id="RollingFileAppender-by-time"><a href="#RollingFileAppender-by-time" class="headerlink" title="RollingFileAppender(by time)"></a>RollingFileAppender(by time)</h3><p>将日志输出到文件中，并根据time分割日志</p><pre><code>&lt;appender name=&quot;debug&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;        &lt;file&gt;${LOG_PATH}/debug.log&lt;/file&gt;        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss} %logger %msg%n&lt;/pattern&gt;        &lt;/encoder&gt;        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;            &lt;fileNamePattern&gt;${LOG_PATH}/debug.%d{yyyyMMdd-HH}.log&lt;/fileNamePattern&gt;            &lt;maxHistory&gt;30&lt;/maxHistory&gt;        &lt;/rollingPolicy&gt;        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;            &lt;level&gt;DEBUG&lt;/level&gt;            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;        &lt;/filter&gt;    &lt;/appender&gt;</code></pre><h3 id="JSON-Appender"><a href="#JSON-Appender" class="headerlink" title="JSON Appender"></a>JSON Appender</h3><p>按照JSON格式输出日志</p><pre><code>&lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;    &lt;encoder class=&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;&gt;        &lt;providers&gt;            &lt;pattern&gt;                &lt;pattern&gt;                    {                    &quot;timestamp&quot;: &quot;%date{\&quot;yyyy-MM-dd HH:mm:ss\&quot;}&quot;,                    &quot;log_level&quot;: &quot;%level&quot;,                    &quot;class_name&quot;: &quot;%class&quot;,                    &quot;message&quot;: &quot;%message&quot;,                    &quot;stack_trace&quot;: &quot;%exception{5}&quot;                    }                &lt;/pattern&gt;            &lt;/pattern&gt;        &lt;/providers&gt;        &lt;!--&lt;charset&gt;UTF-8&lt;/charset&gt;--&gt;    &lt;/encoder&gt;&lt;/appender&gt;</code></pre><h2 id="多环境日志输出"><a href="#多环境日志输出" class="headerlink" title="多环境日志输出"></a>多环境日志输出</h2><p>根据不同的环境(test,dev,pre,release)来定义输出日志</p><pre><code>&lt;springProfile name=&quot;test,dev&quot;&gt; //多个环境用逗号分隔    &lt;logger name=&quot;com.meitu.alarm&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;        &lt;appender-ref ref=&quot;debug&quot;/&gt;        &lt;appender-ref ref=&quot;info&quot;/&gt;        &lt;appender-ref ref=&quot;warn&quot;/&gt;        &lt;appender-ref ref=&quot;error&quot;/&gt;    &lt;/logger&gt;&lt;/springProfile&gt;&lt;springProfile name=&quot;release&quot;&gt;    &lt;logger name=&quot;com.meitu.alarm&quot; level=&quot;info&quot; additivity=&quot;false&quot;&gt;        &lt;appender-ref ref=&quot;console&quot;/&gt;    &lt;/logger&gt;&lt;/springProfile&gt;</code></pre><h2 id="关闭某个包或者某个类的日志"><a href="#关闭某个包或者某个类的日志" class="headerlink" title="关闭某个包或者某个类的日志"></a>关闭某个包或者某个类的日志</h2><pre><code>&lt;logger name=&quot;packageName&quot; level=&quot;OFF&quot; /&gt;</code></pre><h2 id="自定义字段"><a href="#自定义字段" class="headerlink" title="自定义字段"></a>自定义字段</h2><p>若日志最终存储到ES中，可以在JSON中添加自定义的字段，方便问题的排查</p><h3 id="StructuredArguments提供的结构化字段"><a href="#StructuredArguments提供的结构化字段" class="headerlink" title="StructuredArguments提供的结构化字段"></a>StructuredArguments提供的结构化字段</h3><pre><code>import static net.logstash.logback.argument.StructuredArguments.*//output: log message valuelogger.info(&quot;log message {}&quot;, value(&quot;name&quot;, &quot;value&quot;));//output: log message name=valuelogger.info(&quot;log message {}&quot;, keyValue(&quot;name&quot;, &quot;value&quot;));//json output: {&quot;message&quot;:&quot;log message&quot;,&quot;name&quot;:&quot;value&quot;}logger.info(&quot;log message&quot;, keyValue(&quot;name&quot;, &quot;value&quot;));</code></pre><p>如果想在输出的JSON中，加上自定义字段，需要配置arguments参数</p><pre><code>&lt;encoder class=&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;&gt;        &lt;providers&gt;            &lt;pattern&gt;                &lt;pattern&gt;                    {                    &quot;timestamp&quot;: &quot;%date{\&quot;yyyy-MM-dd HH:mm:ss\&quot;}&quot;,                    &quot;log_level&quot;: &quot;%level&quot;,                    &quot;class_name&quot;: &quot;%class&quot;,                    &quot;thread&quot;: &quot;%thread&quot;,                    &quot;message&quot;: &quot;%message&quot;,                    &quot;stack_trace&quot;: &quot;%exception{5}&quot;                    }                &lt;/pattern&gt;            &lt;/pattern&gt;            &lt;arguments/&gt;        &lt;/providers&gt;    &lt;/encoder&gt;</code></pre><h3 id="Markers提供的标记"><a href="#Markers提供的标记" class="headerlink" title="Markers提供的标记"></a>Markers提供的标记</h3><pre><code>import static net.logstash.logback.marker.Markers.* /* * Add &quot;name&quot;:&quot;value&quot; to the JSON output. */logger.info(append(&quot;name&quot;, &quot;value&quot;), &quot;log message&quot;);/* * Add &quot;name1&quot;:&quot;value1&quot;,&quot;name2&quot;:&quot;value2&quot; to the JSON output by using multiple markers. */logger.info(append(&quot;name1&quot;, &quot;value1&quot;).and(append(&quot;name2&quot;, &quot;value2&quot;)), &quot;log message&quot;);</code></pre><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.jianshu.com/p/a26da0c55255" target="_blank" rel="noopener">logstash中logback的json编码器插件</a></li></ul></filter></encoder></layout></appender>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Logback </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Prometheus2.0实战</title>
      <link href="/2019/01/26/prometheus2-0-shi-zhan/"/>
      <url>/2019/01/26/prometheus2-0-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="Prometheus-1-x-VS-Prometheus-2-x"><a href="#Prometheus-1-x-VS-Prometheus-2-x" class="headerlink" title="Prometheus 1.x VS Prometheus 2.x"></a>Prometheus 1.x VS Prometheus 2.x</h2><p>1.0版本与2.0版本最大的改变之一就是存储引擎，1.x版本使用的是LevelDB，2.x使用的是TSDB，性能上有较大的提升，以下是官方对比数据</p><ul><li>与 Prometheus 1.8 相比，CPU使用率降低了 20％ - 40％</li><li>与 Prometheus 1.8 相比，磁盘空间使用率降低了 33％ - 50％</li><li>没有太多查询，平均负载的磁盘 I/O&lt;1％</li></ul><h2 id="Prometheus-存储"><a href="#Prometheus-存储" class="headerlink" title="Prometheus 存储"></a>Prometheus 存储</h2><h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><p>Prometheus将两个小时的数据存储在一个目录底下，目录包含chunk(存储时间序列样本)，meta(存储元数据)，index(存储metric名称以及label)</p><p>数据会先缓存在内存中而不会立刻持久化到磁盘中，因此Prometheus采用write-ahead-log机制，当prometheus server发生异常，重启之后会根据日志重新加载数据。</p><p>通过API删除数据，数据先保存到tombstone文件，而不是立即从磁盘删除</p><pre><code>./data/01BKGTZQ1SYQJTR4PB43C8PD98./data/01BKGTZQ1SYQJTR4PB43C8PD98/meta.json./data/01BKGTZQ1SYQJTR4PB43C8PD98/index./data/01BKGTZQ1SYQJTR4PB43C8PD98/chunks./data/01BKGTZQ1SYQJTR4PB43C8PD98/chunks/000001./data/01BKGTZQ1SYQJTR4PB43C8PD98/tombstones</code></pre><h3 id="远程存储"><a href="#远程存储" class="headerlink" title="远程存储"></a>远程存储</h3><p>prometheus可以与远程系统进行如下交互：</p><ol><li>prometheus可以通过remote_write写入数据</li><li>prometheus可以通过remote_read读取数据</li></ol><p><img src="https://prometheus.io/docs/prometheus/latest/images/remote_integrations.png" alt=""></p><p>目前prometheus是通过HTTP协议传输数据，未来可能会使用gRPC。</p><p>采用远程存储时，prometheus进行查询时，会从远端拉取所需的数据，然后进行相应的处理，因此可靠性不能保证。目前PromQL是不支持分布式查询。</p><p>目前支持prometheus远程存储的数据源如下：</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fzgkyab3ybj30bc0brmye.jpg" alt=""></p><h2 id="Prometheus-Federation"><a href="#Prometheus-Federation" class="headerlink" title="Prometheus Federation"></a>Prometheus Federation</h2><h3 id="Hierarchical-federation"><a href="#Hierarchical-federation" class="headerlink" title="Hierarchical federation"></a>Hierarchical federation</h3><p>这种方式相同job的不同instance分布在不同的prometheus上，高一层级的prometheus server从低层级的prometheus server查询数据。</p><p>这种方式适合于某个job收集metrics过多，单台prometheus无法负荷时，可以利用这种方式对job的instance进行水平扩展，将不同的instance拆分到不同的prometheus中，在由全局的prometheus来收集聚合数据<br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fzgjb6rttlj30kp08at92.jpg" alt=""></p><h3 id="Cross-service-federation"><a href="#Cross-service-federation" class="headerlink" title="Cross-service federation"></a>Cross-service federation</h3><p>这种方式是以service维度来拆分prometheus，在由全局的prometheus来收集聚合数据<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fzgjg57ocrj30gx07q3yo.jpg" alt=""></p><h3 id="Federation的优缺点"><a href="#Federation的优缺点" class="headerlink" title="Federation的优缺点"></a>Federation的优缺点</h3><p>优点：数据集中式管理，告警，不需要为每个prometheus实例管理数据</p><p>缺点：数据集中化，网络可能会延迟。Federation没有解决数据单点问题</p><h2 id="Recording-rules"><a href="#Recording-rules" class="headerlink" title="Recording rules"></a>Recording rules</h2><p>recording rule类似于Influxdb的CQ，可以在后台处理配置的表达式，并将表达式的结果存储起来。recording rule主要目的是为了提前计算一些复杂运算结果，提供查询效率。CQ的主要目的在于聚合数据，从而通过不同的RP策略来保存数据</p><pre><code>groups:  - name: example    rules:    - record: job:http_inprogress_requests:sum      expr: sum(http_inprogress_requests) by (job)</code></pre><p>其中record表示指标的名称，expr则是指标的表达式</p><h2 id="prometheus高可用部署"><a href="#prometheus高可用部署" class="headerlink" title="prometheus高可用部署"></a>prometheus高可用部署</h2><h3 id="基于HA"><a href="#基于HA" class="headerlink" title="基于HA"></a>基于HA</h3><p>部署多台prometheus server(一主一从)，并采集相同export的指标。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fziofcdgszj30el06c74a.jpg" alt=""></p><p>基于HA模式只能确保prometheus服务可用性问题，但是不解决prometheus server之间数据一致性问题已经持久化问题(数据丢失无法恢复)。</p><h3 id="基于HA-远程存储"><a href="#基于HA-远程存储" class="headerlink" title="基于HA + 远程存储"></a>基于HA + 远程存储</h3><p>在HA的基础上通过添加remote storage，将监控数据存储到第三方存储服务上。既解决了服务可用性问题，同时也确保了数据的持久化</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fzirxf5gtnj30e207ndfx.jpg" alt=""></p><h3 id="基于HA-远程存储-联邦集成"><a href="#基于HA-远程存储-联邦集成" class="headerlink" title="基于HA + 远程存储 + 联邦集成"></a>基于HA + 远程存储 + 联邦集成</h3><p>当单台prometheus需要处理大量的采集任务时，可以使用prometheusde联邦的方式，将采集任务分割到不同的prometheus实例中。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fzisip7noyj30pw09l0t5.jpg" alt=""></p><h3 id="三种方式对比"><a href="#三种方式对比" class="headerlink" title="三种方式对比"></a>三种方式对比</h3><table><thead><tr><th>部署方式</th><th>使用场景</th></tr></thead><tbody><tr><td>基于HA</td><td>监控规模不大，prometheus server不会经常发生迁移，并且数据保存周期较短</td></tr><tr><td>基于HA + 远程存储</td><td>监控规模不大，但要求监控数据持久化</td></tr><tr><td>基于HA + 远程存储 + 联邦集成</td><td>单数据中心，并且采集指标量很大，此时prometheus的性能瓶颈主要在于大量的采集任务</td></tr></tbody></table><h3 id="Thanos"><a href="#Thanos" class="headerlink" title="Thanos"></a>Thanos</h3><p><a href="https://github.com/improbable-eng/thanos" target="_blank" rel="noopener">thanos</a>是开源的大规模Prometheus集群解决方案，它的设计目标如下</p><ol><li>全局的查询视图</li><li>不受限的数据存储</li><li>高可用性</li></ol><p>thanos的架构如图</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fzk1j4mmlnj317f0u07kq.jpg" alt=""></p><h3 id="M3"><a href="#M3" class="headerlink" title="M3"></a>M3</h3><p><a href="https://github.com/m3db/m3" target="_blank" rel="noopener">M3</a>是Uber开源的基于M3DB的指标平台，它提供了如下的功能</p><ol><li>全局数据查询和存储</li><li>提供数据聚合以及保留(retention)功能</li><li>可作为prometheus的存储后台，提供prometheus的高可用部署</li></ol><p><img src="http://eng.uber.com/wp-content/uploads/2018/08/image4-1.png" alt=""></p><p><img src="http://eng.uber.com/wp-content/uploads/2018/08/image1-1.png" alt=""></p><h2 id="Prometheus实践"><a href="#Prometheus实践" class="headerlink" title="Prometheus实践"></a>Prometheus实践</h2><h3 id="recording-rule"><a href="#recording-rule" class="headerlink" title="recording rule"></a>recording rule</h3><p>生成recording rule</p><pre><code>groups: - name: test   rules:   - record: job:prometheus_http_response_size_bytes_sum:sum     expr: sum(prometheus_http_response_size_bytes_sum) by (job)</code></pre><p>在graph中查看recording rule生成的指标</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fzjyh83xnsj32200f0jt9.jpg" alt=""></p><p>可以看到生成的新指标与表达式得到的指标值一致</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fzjyjcgsasj31vk0eumyu.jpg" alt="">       </p><h3 id="remote-write-remote-read"><a href="#remote-write-remote-read" class="headerlink" title="remote_write/remote_read"></a>remote_write/remote_read</h3><h4 id="influxdb"><a href="#influxdb" class="headerlink" title="influxdb"></a>influxdb</h4><p>influxdb内部已经实现了读写prometheus数据的协议，只需要在prometheus.yml中配置remote_write和remote_read的url地址即可</p><pre><code>remote_write: - url: &quot;http://127.0.0.1:8086/api/v1/prom/write?db=prometheus_test&quot;remote_read: - url: &quot;http://127.0.0.1:8086/api/v1/prom/read?db=prometheus_test&quot;</code></pre><p>配置prometheus之后，需要在infludb中创建配置中对应的数据库</p><pre><code>create database prometheus_test</code></pre><p>启动prometheus之后，可以在influxdb中看到生成的measurement，每个metric对应一个measurement，而metric中的label对应inflxudb的tag</p><pre><code># Prometheus metricexample_metric{queue=&quot;0:http://example:8086/api/v1/prom/write?db=prometheus&quot;,le=&quot;0.005&quot;} 308# Same metric parsed into InfluxDBmeasurement  example_metrictags  queue = &quot;0:http://example:8086/api/v1/prom/write?db=prometheus&quot;  le = &quot;0.005&quot;  job = &quot;prometheus&quot;  instance = &quot;localhost:9090&quot;  __name__ = &quot;example_metric&quot;fields  value = 308</code></pre><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fzjzk2viz9j30sw0le423.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fzjzkukt4wj317y0bmtac.jpg" alt=""></p><h3 id="federation"><a href="#federation" class="headerlink" title="federation"></a>federation</h3><p>启动三台prometheus server，其中一台作为master，从另外两台拉取数据</p><table><thead><tr><th>name</th><th>role</th><th>port</th></tr></thead><tbody><tr><td>prometheus</td><td>master</td><td>9090</td></tr><tr><td>node1</td><td>collector</td><td>9091</td></tr><tr><td>node2</td><td>collector</td><td>9092</td></tr></tbody></table><p>master配置</p><pre><code>global:  scrape_interval: 15s   evaluation_interval: 15s scrape_configs: - job_name: &#39;prometheus&#39;   honor_labels: true   metrics_path: &#39;/federate&#39;   params:    &#39;match[]&#39;:      - &#39;{job=&quot;node1&quot;}&#39;      - &#39;{job=&quot;node2&quot;}&#39;</code></pre><p>node1配置</p><pre><code>global:  scrape_interval:     15s  evaluation_interval: 15s  external_labels:      server: &#39;node1&#39;scrape_configs:  - job_name: &#39;node1&#39;    static_configs:      - targets: [&#39;localhost:9091&#39;]</code></pre><p>node2配置    </p><pre><code>global:  scrape_interval:     15s  evaluation_interval: 15s  external_labels:      server: &#39;node2&#39;scrape_configs:  - job_name: &#39;node2&#39;    static_configs:      - targets: [&#39;localhost:9092&#39;]</code></pre><p>启动3台prometheus</p><pre><code>#master./prometheus --config.file=prometheus.yml#node1./prometheus --config.file=prometheus-node1-9091.yml --storage.tsdb.path=data-node1 --web.listen-address=0.0.0.0:9091#node2./prometheus --config.file=prometheus-node2-9092.yml --storage.tsdb.path=data-node2 --web.listen-address=0.0.0.0:9092</code></pre><p>可以看到在master可以查询到另外两台node的数据</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fzk187nu4wj326u0l443s.jpg" alt="">                 </p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.ctolib.com/docs/sfile/prometheus-book/alert/prometheus-recoding-rules.html" target="_blank" rel="noopener">使用Recoding Rules优化性能</a></li><li><a href="https://www.imuo.com/a/dbe9b42ff8b0c9569db6d250c4ca1261fc228876ef86ada92d45dc3523c20e20" target="_blank" rel="noopener">Prometheus 联邦及高可用详解</a></li><li><a href="https://hk.saowen.com/a/c1c70c681b1df019e2e8bc9291e1e43b489bbaaca5923b5b4fd9bb4f734c7d73" target="_blank" rel="noopener">Prometheus高可用方案策略</a></li><li><a href="http://dockone.io/article/6019" target="_blank" rel="noopener">Thanos：开源的大规模Prometheus集群解决方案</a></li><li><a href="https://docs.mesosphere.com/services/prometheus/0.1.1-2.3.2/configuration/remote-storage/" target="_blank" rel="noopener">Prometheus Remote Storage to InfluxDB</a></li><li><a href="https://docs.influxdata.com/influxdb/v1.7/supported_protocols/prometheus/" target="_blank" rel="noopener">Prometheus remote read and write API support</a></li><li><a href="https://kairen.github.io/2018/06/29/devops/prometheus-federation/" target="_blank" rel="noopener">了解 Prometheus Federation 功能</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Prometheus简介</title>
      <link href="/2019/01/16/prometheus-jian-jie/"/>
      <url>/2019/01/16/prometheus-jian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="Prometheus简介"><a href="#Prometheus简介" class="headerlink" title="Prometheus简介"></a>Prometheus简介</h2><p>Prometheus 是一套开源的系统监控报警框架。作为新一代的监控框架，Prometheus具有如下几个特点</p><ol><li>多维度的数据模型</li><li>灵活和强大的查询语句(PromQL)</li><li>易于管理，prometheus是一个独立的二进制文件，不依赖分布式存储</li><li>采用pull模式利用HTTP采集数据</li><li>有多种的可视化图形界面(目前推荐使用Grafana展示数据)</li></ol><p>prometheus的架构如下图所示</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fzbvfyy503j31ae0r60yu.jpg" alt=""></p><p>prometheus的主要工作流程如下</p><ol><li>prometheus serve定期从job pull metric，或者接收来自Pushgateway的metrics</li><li>prometheus将获取的metric存储在本地，并根据配置的alert rule向Alertmanage发送告警信息</li><li>Alertmanage根据配置，对接收的告警信息进行处理，发出相应的告警</li><li>可视化采集的数据</li></ol><h2 id="Prometheus相关概念"><a href="#Prometheus相关概念" class="headerlink" title="Prometheus相关概念"></a>Prometheus相关概念</h2><h3 id="instance"><a href="#instance" class="headerlink" title="instance"></a>instance</h3><p>一个单独采集的目标(target)，一般对应一个进程</p><h3 id="job"><a href="#job" class="headerlink" title="job"></a>job</h3><p>一组相同类型的instance</p><pre><code>web-api部署在多台实例上，prometheus会从每个实例上去采集数据job: web-api    instance x.x.x.x:port1    instance x.x.x.x:port2</code></pre><h3 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h3><p>实际的时间序列，每一个时间序列包含一个float64的值以及一个毫秒级的时间戳</p><h3 id="metric"><a href="#metric" class="headerlink" title="metric"></a>metric</h3><p>prometheus有4中metric，可以将metric理解为数据模型，metric的格式如下</p><pre><code>&lt;metric name&gt;{&lt;label name&gt;=&lt;label value&gt;,...}</code></pre><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><p>标签，用来表示采集数据的维度,例如有个指标为http_request_total表示所有http请求的总数，则http_request_total{method=”POST”}则表示请求方式为POST的请求总数，其中method就是label</p><h2 id="Prometheus安装配置"><a href="#Prometheus安装配置" class="headerlink" title="Prometheus安装配置"></a>Prometheus安装配置</h2><p>下载<a href="https://prometheus.io/download" target="_blank" rel="noopener">prometheus</a>，解压安装包</p><pre><code>tar -zxvf prometheus-2.6.0.darwin-amd64.tar.gzcd prometheus-2.6.0.darwin-amd64</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>prometheus安装包下有一个二进制文件，叫prometheus，之前运行该文件，即可启动prometheus server</p><pre><code>./prometheus --help</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>prometheus的配置文件为prometheus.yml，内容如下</p><pre><code>global:  scrape_interval:     15s # prometheus server 从instance拉取metric的间隔  evaluation_interval: 15s # prometheus server检测alert rule的间隔  scrape_timeout: 10s # proemtheus server抓取数据的超时时间# Alertmanager 配置alerting:  alertmanagers:  - static_configs:    - targets:      # - alertmanager:9093# 告警规则rule_files:  # - &quot;first_rules.yml&quot;  # - &quot;second_rules.yml&quot;# 抓取对象配置scrape_configs:  # 全局唯一的名称，用来标识一个job  - job_name: &#39;prometheus&#39;    # 该job对应的所有instance    static_configs:    - targets: [&#39;localhost:9090&#39;]</code></pre><h2 id="Metric"><a href="#Metric" class="headerlink" title="Metric"></a>Metric</h2><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p>对数据进行累加，数据只会递增，例如http请求数，错误个数</p><h3 id="Guage"><a href="#Guage" class="headerlink" title="Guage"></a>Guage</h3><p>可以对数据进行加减，例如温度，线程数量</p><h3 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h3><p>可以理解为柱状图，依据事先设置的阈值，对采集数据进行分类统计，适合统计的指标如response time，request size等</p><p>Histogram具有3个指标值</p><pre><code>&lt;metric_name&gt;_bucket 对应分桶的条数&lt;metric_name&gt;_sum 采集数据求和的值&lt;metric_name&gt;_count 采集条数</code></pre><p>下面以实例来说明上述三个指标，例如对response time进行统计，总共采集了3条数据，分别是</p><pre><code>100ms,200ms,120ms</code></pre><p>则以下三个指标分别表示</p><pre><code>response_time_bucket{le=120}=2, response time小于等于120ms的数据有两条response_time_sum=(100+200+120)=420 对所有的response time进行求和response_time_count=3 总共采集了3条数据</code></pre><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>与Histogram类似，最大的区别在于Summary可以精确的统计百分位的值，例如90%的响应时间低于200ms</p><p>summary也有三个指标</p><pre><code>&lt;metric_name&gt;{quantile=&quot;&lt;q&gt;&quot;}  0=&lt;q&lt;=1 百分位位于q的值&lt;metric_name&gt;_sum 采集数据求和的值&lt;metric_name&gt;_count 采集条数</code></pre><h3 id="Histogram-VS-Summary"><a href="#Histogram-VS-Summary" class="headerlink" title="Histogram VS Summary"></a>Histogram VS Summary</h3><ul><li>都包含&lt;basename>_sum，&lt;basename>_count</li><li>Histogram 需要通过 \<basename>_bucket 计算 quantile, 而 Summary 直接存储了 quantile 的值。</basename></li></ul><h2 id="Prometheus实例演示"><a href="#Prometheus实例演示" class="headerlink" title="Prometheus实例演示"></a>Prometheus实例演示</h2><h3 id="启动prometheus"><a href="#启动prometheus" class="headerlink" title="启动prometheus"></a>启动prometheus</h3><pre><code>./prometheus --config.file=&quot;prometheus.yml&quot;</code></pre><p>启动成功之后可以在localhost:9090上查看对应的metric<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fzbx49z7fqj327w0ra78w.jpg" alt=""></p><h3 id="查看对应的指标"><a href="#查看对应的指标" class="headerlink" title="查看对应的指标"></a>查看对应的指标</h3><p>在输入框中输入指标名称，即可看到对应指标的值</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fzbx6jtpt3j327i0mu428.jpg" alt=""></p><h3 id="可视化指标"><a href="#可视化指标" class="headerlink" title="可视化指标"></a>可视化指标</h3><p>选择graph标签页，即可将对应的数据可视化，例如查看http请求code为200的QPS</p><pre><code>rate(promhttp_metric_handler_requests_total{code=&quot;200&quot;}[1m])</code></pre><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fzbxac8hggj31ww0u0jva.jpg" alt=""></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener">https://prometheus.io/docs/introduction/overview/</a></li><li><a href="https://prometheus.io/docs/practices/histograms/" target="_blank" rel="noopener">https://prometheus.io/docs/practices/histograms/</a></li><li><a href="https://www.ibm.com/developerworks/cn/cloud/library/cl-lo-prometheus-getting-started-and-practice/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/cloud/library/cl-lo-prometheus-getting-started-and-practice/index.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kafka源码分析——Consumer</title>
      <link href="/2019/01/13/kafka-yuan-ma-fen-xi-consumer/"/>
      <url>/2019/01/13/kafka-yuan-ma-fen-xi-consumer/</url>
      
        <content type="html"><![CDATA[<h2 id="Consumer使用实例"><a href="#Consumer使用实例" class="headerlink" title="Consumer使用实例"></a>Consumer使用实例</h2><h3 id="kafka-console-consumer"><a href="#kafka-console-consumer" class="headerlink" title="kafka-console-consumer"></a>kafka-console-consumer</h3><pre><code>sh kafka-console-consumer.sh ----bootstrap-server localhost:9092 --topic test --from-beginning</code></pre><h3 id="consumer-client"><a href="#consumer-client" class="headerlink" title="consumer client"></a>consumer client</h3><pre><code>Properties props = new Properties();props.put(&quot;bootstrap.servers&quot;,&quot;localhost:9092&quot;);    props.put(&quot;group.id&quot;,&quot;test_group_id&quot;);props.put(&quot;enable.auto.commit&quot;,&quot;true&quot;);props.put(&quot;auto.commit.interval.ms&quot;, &quot;1000&quot;);props.put(&quot;key.deserializer&quot;,&quot;org.apache.kafka.common.serialization.StringSerializer&quot;);props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);KafkaConsumer&lt;String,String&gt; consumer = new KafkaConsumer&lt;&gt;(props);while(true){    ConsumerRecords&lt;String,String&gt; records = consumer.poll(1000)    for(ConsumerRecord&lt;String, String&gt; record : records){        System.out.printf(&quot;offset=%d,key=%s,value=%s&quot;,record.offset(),record.key(),record.value());    }}</code></pre><p>可以看到consumer的入口在poll方法，下面来看下poll方法的实现</p><h2 id="Consumer-poll模型"><a href="#Consumer-poll模型" class="headerlink" title="Consumer poll模型"></a>Consumer poll模型</h2><pre><code>//timeout是Consumer消费的超时时间，如果设置为0，表示buffer中只要有数据就立刻拉取public ConsumerRecords&lt;K, V&gt; poll(long timeout) {    acquire();    try {        if (timeout &lt; 0)            throw new IllegalArgumentException(&quot;Timeout must not be negative&quot;);        if (this.subscriptions.hasNoSubscriptionOrUserAssignment())            throw new IllegalStateException(&quot;Consumer is not subscribed to any topics or assigned any partitions&quot;);        // poll for new data until the timeout expires        long start = time.milliseconds();        long remaining = timeout;        do {                //从订阅的partition中消费数据，pollonce是其核心实现            Map&lt;TopicPartition, List&lt;ConsumerRecord&lt;K, V&gt;&gt;&gt; records = pollOnce(remaining);            if (!records.isEmpty()) {                // 在返回获取数据之前，需要发起下次的fetch请求，主要是为了避免用户在处理获取数据，而导致fetch请求被阻塞                if (fetcher.sendFetches() &gt; 0 || client.pendingRequestCount() &gt; 0)                    client.pollNoWakeup();                if (this.interceptors == null)                    return new ConsumerRecords&lt;&gt;(records);                else                    return this.interceptors.onConsume(new ConsumerRecords&lt;&gt;(records));            }            long elapsed = time.milliseconds() - start;            remaining = timeout - elapsed;        } while (remaining &gt; 0);        return ConsumerRecords.empty();    } finally {        release();    }}</code></pre><p>Consumer的poll方法主要在做以下几件事：</p><ol><li>检测timeout是否合法以及Consumer是否订阅了相应的topic-partition</li><li>调用pollOnce方法获取数据</li><li>在返回结果前，提前发起下次的fetch请求，避免用户在处理返回数据时，而导致线程被阻塞</li><li>如果在timeout的时间中没有获取到数据，则返回空数据</li></ol><h3 id="pollOnce方法"><a href="#pollOnce方法" class="headerlink" title="pollOnce方法"></a>pollOnce方法</h3><pre><code>private Map&lt;TopicPartition, List&lt;ConsumerRecord&lt;K, V&gt;&gt;&gt; pollOnce(long timeout) {    coordinator.poll(time.milliseconds());    // 确认是否所有的分区的offset是否有效，更新没有生效的partition的offset    if (!subscriptions.hasAllFetchPositions())        updateFetchPositions(this.subscriptions.missingFetchPositions());    // 如果获取到数据，则立马返回    Map&lt;TopicPartition, List&lt;ConsumerRecord&lt;K, V&gt;&gt;&gt; records = fetcher.fetchedRecords();    if (!records.isEmpty())        return records;    // 对于新的fetch请求，立即发起请求    fetcher.sendFetches();    long now = time.milliseconds();    long pollTimeout = Math.min(coordinator.timeToNextPoll(now), timeout);     //调用底层的poll方法，发起请求    client.poll(pollTimeout, now, new PollCondition() {        @Override        public boolean shouldBlock() {            // 对于已完成的fetch请求，则不进行阻塞            return !fetcher.hasCompletedFetches();        }    });    // 如果消费组group需要进行负责均衡rebalance，则直接返回空数据，    if (coordinator.needRejoin())        return Collections.emptyMap();    return fetcher.fetchedRecords();}    </code></pre><p>pollOnce方法，主要有以下几个步骤：</p><ol><li>coordinator.poll()</li><li>updateFetchPositions()</li><li>fetcher.fetchedRecords()</li><li>fetcher.sendFetches()</li><li>client.poll()</li><li>coordinator.needRejoin()</li></ol><p>下面详细分析以上几个步骤</p><h3 id="ConsumerCoordinator-poll"><a href="#ConsumerCoordinator-poll" class="headerlink" title="ConsumerCoordinator.poll()"></a>ConsumerCoordinator.poll()</h3><pre><code>//确保这个group的coordinator是已知的，并且已经Consumer已经加入到这个group中public void poll(long now) {    invokeCompletedOffsetCommitCallbacks();      //若订阅了topic，并且该coordinator是未知的，则初始化coordinator    if (subscriptions.partitionsAutoAssigned() &amp;&amp; coordinatorUnknown()) {        ensureCoordinatorReady();        now = time.milliseconds();    }     //Consumer是否需要重新加入到group中（如果partition发生变化，则需要rejoin）    if (needRejoin()) {        // due to a race condition between the initial metadata fetch and the initial rebalance,        // we need to ensure that the metadata is fresh before joining initially. This ensures        // that we have matched the pattern against the cluster&#39;s topics at least once before joining.        if (subscriptions.hasPatternSubscription())            client.ensureFreshMetadata();          // 确保group是active的        ensureActiveGroup();        now = time.milliseconds();    }     //检测心跳线程是否正常，若不正常，则抛出异常    pollHeartbeat(now);    //开启auto commit时，当定时时间到时则自动提交    maybeAutoCommitOffsetsAsync(now);}</code></pre><h3 id="updateFetchPositions"><a href="#updateFetchPositions" class="headerlink" title="updateFetchPositions()"></a>updateFetchPositions()</h3><pre><code>//如果有committed position，则将fetch position设置为committed position，否则使用配置的重置策略去设置offsetprivate void updateFetchPositions(Set&lt;TopicPartition&gt; partitions) {    //先重置那些需要重置的partition，比如调用了seekToBeginning，seekToEnd的partition    fetcher.resetOffsetsIfNeeded(partitions);    if (!subscriptions.hasAllFetchPositions(partitions)) {        // if we still don&#39;t have offsets for the given partitions, then we should either        // seek to the last committed position or reset using the auto reset policy        // first refresh commits for all assigned partitions        coordinator.refreshCommittedOffsetsIfNeeded();        // then do any offset lookups in case some positions are not known        fetcher.updateFetchPositions(partitions);    }}   </code></pre><h3 id="fetcher-fetchedRecords"><a href="#fetcher-fetchedRecords" class="headerlink" title="fetcher.fetchedRecords()"></a>fetcher.fetchedRecords()</h3><pre><code>public Map&lt;TopicPartition, List&lt;ConsumerRecord&lt;K, V&gt;&gt;&gt; fetchedRecords() {    if (nextInLineExceptionMetadata != null) {        ExceptionMetadata exceptionMetadata = nextInLineExceptionMetadata;        nextInLineExceptionMetadata = null;        TopicPartition tp = exceptionMetadata.partition;        if (subscriptions.isFetchable(tp) &amp;&amp; subscriptions.position(tp) == exceptionMetadata.fetchedOffset)            throw exceptionMetadata.exception;    }    Map&lt;TopicPartition, List&lt;ConsumerRecord&lt;K, V&gt;&gt;&gt; drained = new HashMap&lt;&gt;();    int recordsRemaining = maxPollRecords;    while (recordsRemaining &gt; 0) {        if (nextInLineRecords == null || nextInLineRecords.isDrained()) {            CompletedFetch completedFetch = completedFetches.poll();            if (completedFetch == null) break;            try {                nextInLineRecords = parseCompletedFetch(completedFetch);            } catch (KafkaException e) {                if (drained.isEmpty())                    throw e;                nextInLineExceptionMetadata = new ExceptionMetadata(completedFetch.partition, completedFetch.fetchedOffset, e);            }        } else {            TopicPartition partition = nextInLineRecords.partition;            List&lt;ConsumerRecord&lt;K, V&gt;&gt; records = drainRecords(nextInLineRecords, recordsRemaining);            if (!records.isEmpty()) {                List&lt;ConsumerRecord&lt;K, V&gt;&gt; currentRecords = drained.get(partition);                if (currentRecords == null) {                    drained.put(partition, records);                } else {                    // this case shouldn&#39;t usually happen because we only send one fetch at a time per partition,                    // but it might conceivably happen in some rare cases (such as partition leader changes).                    // we have to copy to a new list because the old one may be immutable                    List&lt;ConsumerRecord&lt;K, V&gt;&gt; newRecords = new ArrayList&lt;&gt;(records.size() + currentRecords.size());                    newRecords.addAll(currentRecords);                    newRecords.addAll(records);                    drained.put(partition, newRecords);                }                recordsRemaining -= records.size();            }        }    }    return drained;}</code></pre><h3 id="fetcher-sendFetches"><a href="#fetcher-sendFetches" class="headerlink" title="fetcher.sendFetches()"></a>fetcher.sendFetches()</h3><pre><code>//向订阅的所有的partition所在leader发送fetch请求public int sendFetches() {     //构建fetch请求    Map&lt;Node, FetchRequest.Builder&gt; fetchRequestMap = createFetchRequests();    for (Map.Entry&lt;Node, FetchRequest.Builder&gt; fetchEntry : fetchRequestMap.entrySet()) {        final FetchRequest.Builder request = fetchEntry.getValue();        final Node fetchTarget = fetchEntry.getKey();        log.debug(&quot;Sending fetch for partitions {} to broker {}&quot;, request.fetchData().keySet(), fetchTarget);        //发起fetch请求        client.send(fetchTarget, request)                .addListener(new RequestFutureListener&lt;ClientResponse&gt;() {                    @Override                    public void onSuccess(ClientResponse resp) {                        FetchResponse response = (FetchResponse) resp.responseBody();                        if (!matchesRequestedPartitions(request, response)) {                            // obviously we expect the broker to always send us valid responses, so this check                            // is mainly for test cases where mock fetch responses must be manually crafted.                            log.warn(&quot;Ignoring fetch response containing partitions {} since it does not match &quot; +                                    &quot;the requested partitions {}&quot;, response.responseData().keySet(),                                    request.fetchData().keySet());                            return;                        }                        Set&lt;TopicPartition&gt; partitions = new HashSet&lt;&gt;(response.responseData().keySet());                        FetchResponseMetricAggregator metricAggregator = new FetchResponseMetricAggregator(sensors, partitions);                        for (Map.Entry&lt;TopicPartition, FetchResponse.PartitionData&gt; entry : response.responseData().entrySet()) {                            TopicPartition partition = entry.getKey();                            long fetchOffset = request.fetchData().get(partition).offset;                            FetchResponse.PartitionData fetchData = entry.getValue();                            completedFetches.add(new CompletedFetch(partition, fetchOffset, fetchData, metricAggregator,                                    request.version()));                        }                        sensors.fetchLatency.record(resp.requestLatencyMs());                        sensors.fetchThrottleTimeSensor.record(response.getThrottleTime());                    }                    @Override                    public void onFailure(RuntimeException e) {                        log.debug(&quot;Fetch request to {} for partitions {} failed&quot;, fetchTarget, request.fetchData().keySet(), e);                    }                });    }    return fetchRequestMap.size();}    </code></pre><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://matt33.com/2017/11/11/consumer-pollonce/" target="_blank" rel="noopener">http://matt33.com/2017/11/11/consumer-pollonce/</a></li><li><a href="http://matt33.com/2017/10/22/consumer-join-group/" target="_blank" rel="noopener">http://matt33.com/2017/10/22/consumer-join-group/</a>    </li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kafka源码分析——Producer</title>
      <link href="/2019/01/05/kafka-yuan-ma-fen-xi-producer/"/>
      <url>/2019/01/05/kafka-yuan-ma-fen-xi-producer/</url>
      
        <content type="html"><![CDATA[<h2 id="Producer-使用示例"><a href="#Producer-使用示例" class="headerlink" title="Producer 使用示例"></a>Producer 使用示例</h2><h3 id="kafka-console-producer"><a href="#kafka-console-producer" class="headerlink" title="kafka-console-producer"></a>kafka-console-producer</h3><pre><code>sh kafka-console-producer.sh --broker-list localhost:9092 --topic test</code></pre><h3 id="producer-client"><a href="#producer-client" class="headerlink" title="producer client"></a>producer client</h3><pre><code>Properties props = new Properties(); props.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;); props.put(&quot;acks&quot;, &quot;all&quot;); props.put(&quot;retries&quot;, 0); props.put(&quot;batch.size&quot;, 16384); props.put(&quot;linger.ms&quot;, 1); props.put(&quot;buffer.memory&quot;, 33554432); props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;); props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;); Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props); for(int i = 0; i &lt; 100; i++)     producer.send(new ProducerRecord&lt;String, String&gt;(&quot;my-topic&quot;, Integer.toString(i), Integer.toString(i))); producer.close();</code></pre><p>上述调用kafka Producer相关API，可以看到非常简单</p><pre><code>1. 生成Producer的配置，例如broker的地址，重试次数，key和value的序列化方式2. 调用KafkaProducer的send方法</code></pre><p>下面来看下Producer send的具体流程</p><h2 id="Producer-数据发送流程"><a href="#Producer-数据发送流程" class="headerlink" title="Producer 数据发送流程"></a>Producer 数据发送流程</h2><h3 id="KafkaProducer-send方法"><a href="#KafkaProducer-send方法" class="headerlink" title="KafkaProducer send方法"></a>KafkaProducer send方法</h3><pre><code>/** * * @param record 需要发送的数据    * @param callback 当数据发送成功调用的回调函数 *    */public Future&lt;RecordMetadata&gt; send(ProducerRecord&lt;K, V&gt; record, Callback callback) {    // intercept the record, which can be potentially modified; this method does not throw exceptions    ProducerRecord&lt;K, V&gt; interceptedRecord = this.interceptors == null ? record : this.interceptors.onSend(record);    return doSend(interceptedRecord, callback);}    </code></pre><p>可以看到真正的发送逻辑是在doSend方法中</p><h3 id="KafkaProducer-doSend方法"><a href="#KafkaProducer-doSend方法" class="headerlink" title="KafkaProducer doSend方法"></a>KafkaProducer doSend方法</h3><pre><code>private Future&lt;RecordMetadata&gt; doSend(ProducerRecord&lt;K, V&gt; record, Callback callback) {    TopicPartition tp = null;    try {        // 1. 检测topic的元数据是否可用        ClusterAndWaitTime clusterAndWaitTime = waitOnMetadata(record.topic(), record.partition(), maxBlockTimeMs);        long remainingWaitMs = Math.max(0, maxBlockTimeMs - clusterAndWaitTime.waitedOnMetadataMs);        Cluster cluster = clusterAndWaitTime.cluster;        // 2. 对record的key和value进行序列化        byte[] serializedKey;        try {            serializedKey = keySerializer.serialize(record.topic(), record.key());        } catch (ClassCastException cce) {            throw new SerializationException(&quot;Can&#39;t convert key of class &quot; + record.key().getClass().getName() +                    &quot; to class &quot; + producerConfig.getClass(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG).getName() +                    &quot; specified in key.serializer&quot;);        }        byte[] serializedValue;        try {            serializedValue = valueSerializer.serialize(record.topic(), record.value());        } catch (ClassCastException cce) {            throw new SerializationException(&quot;Can&#39;t convert value of class &quot; + record.value().getClass().getName() +                    &quot; to class &quot; + producerConfig.getClass(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG).getName() +                    &quot; specified in value.serializer&quot;);        }          // 3. 确定需要发送的partition        int partition = partition(record, serializedKey, serializedValue, cluster);        int serializedSize = Records.LOG_OVERHEAD + Record.recordSize(serializedKey, serializedValue);        ensureValidRecordSize(serializedSize);        tp = new TopicPartition(record.topic(), partition);        long timestamp = record.timestamp() == null ? time.milliseconds() : record.timestamp();        log.trace(&quot;Sending record {} with callback {} to topic {} partition {}&quot;, record, callback, record.topic(), partition);        // producer callback will make sure to call both &#39;callback&#39; and interceptor callback        Callback interceptCallback = this.interceptors == null ? callback : new InterceptorCallback&lt;&gt;(callback, this.interceptors, tp);        // 4. 往RecordAccumulator追加record        RecordAccumulator.RecordAppendResult result = accumulator.append(tp, timestamp, serializedKey, serializedValue, interceptCallback, remainingWaitMs);        // 5. 如果batch已经满了，或者新的batch已经创建了，则唤醒send线程发送数据        if (result.batchIsFull || result.newBatchCreated) {            log.trace(&quot;Waking up the sender since topic {} partition {} is either full or getting a new batch&quot;, record.topic(), partition);            this.sender.wakeup();        }        return result.future;        // handling exceptions and record the errors;        // for API exceptions return them in the future,        // for other exceptions throw directly    } catch (ApiException e) {        log.debug(&quot;Exception occurred during message send:&quot;, e);        if (callback != null)            callback.onCompletion(null, e);        this.errors.record();        if (this.interceptors != null)            this.interceptors.onSendError(record, tp, e);        return new FutureFailure(e);    } catch (InterruptedException e) {        this.errors.record();        if (this.interceptors != null)            this.interceptors.onSendError(record, tp, e);        throw new InterruptException(e);    } catch (BufferExhaustedException e) {        this.errors.record();        this.metrics.sensor(&quot;buffer-exhausted-records&quot;).record();        if (this.interceptors != null)            this.interceptors.onSendError(record, tp, e);        throw e;    } catch (KafkaException e) {        this.errors.record();        if (this.interceptors != null)            this.interceptors.onSendError(record, tp, e);        throw e;    } catch (Exception e) {        // we notify interceptor about all exceptions, since onSend is called before anything else in this method        if (this.interceptors != null)            this.interceptors.onSendError(record, tp, e);        throw e;    }}</code></pre><p>doSend方法主要做了一下几件事情</p><h4 id="1-确认topic的元数据是否可用"><a href="#1-确认topic的元数据是否可用" class="headerlink" title="1. 确认topic的元数据是否可用"></a>1. 确认topic的元数据是否可用</h4><pre><code>ClusterAndWaitTime clusterAndWaitTime = waitOnMetadata(record.topic(), record.partition(), maxBlockTimeMs);</code></pre><h4 id="2-对record的key和value进行序列化"><a href="#2-对record的key和value进行序列化" class="headerlink" title="2. 对record的key和value进行序列化"></a>2. 对record的key和value进行序列化</h4><p>kafka提供了需要的序列化的方法，用户也可以根据需要自定义序列化方法，只要实现Serializer接口即可<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fyvqrc8es2j31zq0kwais.jpg" alt=""></p><h4 id="3-确定需要发送的partition"><a href="#3-确定需要发送的partition" class="headerlink" title="3. 确定需要发送的partition"></a>3. 确定需要发送的partition</h4><pre><code>int partition = partition(record, serializedKey, serializedValue, cluster);private int partition(ProducerRecord&lt;K, V&gt; record, byte[] serializedKey, byte[] serializedValue, Cluster cluster) {    Integer partition = record.partition();    // 若指定了partition则使用指定的partition，若没指定则使用默认(DefaultPartitioner)的生成规则    return partition != null ?            partition :            partitioner.partition(                    record.topic(), record.key(), serializedKey, record.value(), serializedValue, cluster);}//DefaultPartitioner 中的partition方法public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) {    List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);    int numPartitions = partitions.size();    // 若key为空，则随机生成一个num，利用num对partition的格式取余，同时保存num，下次在取num时，则对num递增即可    if (keyBytes == null) {        int nextValue = nextValue(topic);        List&lt;PartitionInfo&gt; availablePartitions = cluster.availablePartitionsForTopic(topic);        if (availablePartitions.size() &gt; 0) {            int part = Utils.toPositive(nextValue) % availablePartitions.size();            return availablePartitions.get(part).partition();        } else {            // no partitions are available, give a non-available partition            return Utils.toPositive(nextValue) % numPartitions;        }    } else {        // 若key不为空，则对key进行hash，并用得到的hash值对partition的个数进行取余        return Utils.toPositive(Utils.murmur2(keyBytes)) % numPartitions;    }}private int nextValue(String topic) {    AtomicInteger counter = topicCounterMap.get(topic);    // 若num为null，则随机取个num    if (null == counter) {        counter = new AtomicInteger(new Random().nextInt());        AtomicInteger currentCounter = topicCounterMap.putIfAbsent(topic, counter);        if (currentCounter != null) {            counter = currentCounter;        }    }    // 对num进行自增操作    return counter.getAndIncrement();}</code></pre><p>获取partition的流程图<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fyvr5e6f0ij319i0nwn59.jpg" alt=""></p><h4 id="4-往RecordAccumulator追加record"><a href="#4-往RecordAccumulator追加record" class="headerlink" title="4. 往RecordAccumulator追加record"></a>4. 往RecordAccumulator追加record</h4><p>RecordAccumulator最重要的数据结构是batches，这是一个map，其中key是topicPartition，value是一个recordBatch的先进后出的队列, batchs的结构如下图所示。batchs每次从队尾append数据，从队头开始send数据</p><pre><code>private final ConcurrentMap&lt;TopicPartition, Deque&lt;RecordBatch&gt;&gt; batches;</code></pre><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fyvrv76ah2j30py0f4juz.jpg" alt=""></p><pre><code>public RecordAppendResult append(TopicPartition tp,                                 long timestamp,                                 byte[] key,                                 byte[] value,                                 Callback callback,                                 long maxTimeToBlock) throws InterruptedException {    // abortIncompleteBatches().    appendsInProgress.incrementAndGet();    try {        // 获取对应topicPartition的Deque        Deque&lt;RecordBatch&gt; dq = getOrCreateDeque(tp);        //对deque进行append操作，会保证线程安全        synchronized (dq) {            if (closed)                throw new IllegalStateException(&quot;Cannot send after the producer is closed.&quot;);            // 开始追加数据            RecordAppendResult appendResult = tryAppend(timestamp, key, value, callback, dq);            // 当前队尾的recordBatch数据追加成功，无需新建recordBatch            if (appendResult != null)                return appendResult;        }        // 当前队尾无recordBatch，或者数据已满，需要新分配recordBatch        int size = Math.max(this.batchSize, Records.LOG_OVERHEAD + Record.recordSize(key, value));        log.trace(&quot;Allocating a new {} byte message buffer for topic {} partition {}&quot;, size, tp.topic(), tp.partition());        ByteBuffer buffer = free.allocate(size, maxTimeToBlock);        synchronized (dq) {            // Need to check if producer is closed again after grabbing the dequeue lock.            if (closed)                throw new IllegalStateException(&quot;Cannot send after the producer is closed.&quot;);            RecordAppendResult appendResult = tryAppend(timestamp, key, value, callback, dq);            // recordBatch已经创建，需要释放刚刚分配的buffer            if (appendResult != null) {                free.deallocate(buffer);                return appendResult;            }            MemoryRecordsBuilder recordsBuilder = MemoryRecords.builder(buffer, compression, TimestampType.CREATE_TIME, this.batchSize);            RecordBatch batch = new RecordBatch(tp, recordsBuilder, time.milliseconds());            FutureRecordMetadata future = Utils.notNull(batch.tryAppend(timestamp, key, value, callback, time.milliseconds()));                // 在deque中追加新建的recordBatch            dq.addLast(batch);            // 往未返回ack的队列中，增加刚刚创建的recordBatch            incomplete.add(batch);            // 如果队列中有多个recordBatch，那么最先创建的recordBatch，肯定是可以发送的，或者新建的recordBatch已满，则可以发送数据            return new RecordAppendResult(future, dq.size() &gt; 1 || batch.isFull(), true);        }    } finally {        appendsInProgress.decrementAndGet();    }}</code></pre><h4 id="5-唤醒send线程发送数据"><a href="#5-唤醒send线程发送数据" class="headerlink" title="5. 唤醒send线程发送数据"></a>5. 唤醒send线程发送数据</h4><p>如果发现recordBatch达到发送的要求，则唤醒send线程开始发送数据，下面来看下send线程中的run方法</p><pre><code>package org.apache.kafka.clients.producer.internals;void run(long now) {    Cluster cluster = metadata.fetch();    // 获取可以发送的recordBatch    RecordAccumulator.ReadyCheckResult result = this.accumulator.ready(cluster, now);    // 如果topicPartition的leader是未知，则强制更新metadata    if (!result.unknownLeaderTopics.isEmpty()) {        // The set of topics with unknown leader contains topics with leader election pending as well as        // topics which may have expired. Add the topic again to metadata to ensure it is included        // and request metadata update, since there are messages to send to the topic.        for (String topic : result.unknownLeaderTopics)            this.metadata.add(topic);        this.metadata.requestUpdate();    }    // 删除没有ready的node    Iterator&lt;Node&gt; iter = result.readyNodes.iterator();    long notReadyTimeout = Long.MAX_VALUE;    while (iter.hasNext()) {        Node node = iter.next();        if (!this.client.ready(node, now)) {            iter.remove();            notReadyTimeout = Math.min(notReadyTimeout, this.client.connectionDelay(node, now));        }    }    // 获取对应node可发送的RecordBatch，key为node id    Map&lt;Integer, List&lt;RecordBatch&gt;&gt; batches = this.accumulator.drain(cluster,                                                                     result.readyNodes,                                                                     this.maxRequestSize,                                                                     now);    if (guaranteeMessageOrder) {        // Mute all the partitions drained        for (List&lt;RecordBatch&gt; batchList : batches.values()) {            for (RecordBatch batch : batchList)                this.accumulator.mutePartition(batch.topicPartition);        }    }    // 删除超时的RecordBatch    List&lt;RecordBatch&gt; expiredBatches = this.accumulator.abortExpiredBatches(this.requestTimeout, now);    // update sensors    for (RecordBatch expiredBatch : expiredBatches)        this.sensors.recordErrors(expiredBatch.topicPartition.topic(), expiredBatch.recordCount);    sensors.updateProduceRequestMetrics(batches);    // If we have any nodes that are ready to send + have sendable data, poll with 0 timeout so this can immediately    // loop and try sending more data. Otherwise, the timeout is determined by nodes that have partitions with data    // that isn&#39;t yet sendable (e.g. lingering, backing off). Note that this specifically does not include nodes    // with sendable data that aren&#39;t ready to send since they would cause busy looping.    long pollTimeout = Math.min(result.nextReadyCheckDelayMs, notReadyTimeout);    if (!result.readyNodes.isEmpty()) {        log.trace(&quot;Nodes with data ready to send: {}&quot;, result.readyNodes);        pollTimeout = 0;    }    // 发送RecordBatch    sendProduceRequests(batches, now);    // if some partitions are already ready to be sent, the select time would be 0;    // otherwise if some partition already has some data accumulated but not ready yet,    // the select time will be the time difference between now and its linger expiry time;    // otherwise the select time will be the time difference between now and the metadata expiry time;    this.client.poll(pollTimeout, now);}</code></pre><p>可以看到具体的发送逻辑在sendProduceRequests</p><pre><code>private void sendProduceRequest(long now, int destination, short acks, int timeout, List&lt;RecordBatch&gt; batches) {    Map&lt;TopicPartition, MemoryRecords&gt; produceRecordsByPartition = new HashMap&lt;&gt;(batches.size());    final Map&lt;TopicPartition, RecordBatch&gt; recordsByPartition = new HashMap&lt;&gt;(batches.size());    // 将同一个topicPartition的RecordBatch放在一起发送    for (RecordBatch batch : batches) {        TopicPartition tp = batch.topicPartition;        produceRecordsByPartition.put(tp, batch.records());        recordsByPartition.put(tp, batch);    }    ProduceRequest.Builder requestBuilder =            new ProduceRequest.Builder(acks, timeout, produceRecordsByPartition);    RequestCompletionHandler callback = new RequestCompletionHandler() {        public void onComplete(ClientResponse response) {            handleProduceResponse(response, recordsByPartition, time.milliseconds());        }    };    String nodeId = Integer.toString(destination);    ClientRequest clientRequest = client.newClientRequest(nodeId, requestBuilder, now, acks != 0, callback);    client.send(clientRequest, now);    log.trace(&quot;Sent produce request to {}: {}&quot;, nodeId, requestBuilder);}</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下Producer的发送流程</p><ol><li>确认topic的元数据是否可用</li><li>对key和value进行序列化</li><li>确定发送的partition</li><li>往RecordAccumulator追加record</li><li>如果满足发送条件，则唤醒sender线程发送数据</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kafka——QuickStart(2)</title>
      <link href="/2018/12/20/kafka-quickstart-2/"/>
      <url>/2018/12/20/kafka-quickstart-2/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载源码安装"><a href="#下载源码安装" class="headerlink" title="下载源码安装"></a>下载源码安装</h3><p><a href="https://kafka.apache.org/downloads" target="_blank" rel="noopener">下载地址</a></p><p>我用的kafka的版本是0.10.2.0，后续的例子都是使用这个版本</p><pre><code>tar -zxvf kafka-0.10.2.0-src.tgzcd kafka-0.10.2.0</code></pre><h3 id="Mac-Homebrew安装"><a href="#Mac-Homebrew安装" class="headerlink" title="Mac Homebrew安装"></a>Mac Homebrew安装</h3><pre><code>brew install kafka</code></pre><p>kafka的启动需要依赖zookeeper，用homebrew安装时，会自动安装zookeeper。安装完成之后，可以用以下命令查看安装信息</p><pre><code>brew info kafka</code></pre><p>kafka的安装路径，可以用以下命令查看</p><pre><code>brew list kakfa</code></pre><p>一般情况下，brew安装的项目路径为</p><pre><code>/usr/local/Cellar</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="1-启动zookeeper"><a href="#1-启动zookeeper" class="headerlink" title="1. 启动zookeeper"></a>1. 启动zookeeper</h3><pre><code>cd /usr/local/Cellar/kafka/0.10.2.0/libexec/binsh zookeeper-server-start.sh ../config/zookeeper.properties</code></pre><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fyfqs9ohd9j327o0patom.jpg" alt=""></p><h3 id="2-启动Kafka-Server"><a href="#2-启动Kafka-Server" class="headerlink" title="2. 启动Kafka Server"></a>2. 启动Kafka Server</h3><pre><code>sh kafka-server-start.sh ../config/server.properties</code></pre><h3 id="3-创建Topic"><a href="#3-创建Topic" class="headerlink" title="3. 创建Topic"></a>3. 创建Topic</h3><pre><code>sh kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</code></pre><h3 id="4-启动Producer"><a href="#4-启动Producer" class="headerlink" title="4. 启动Producer"></a>4. 启动Producer</h3><pre><code>sh kafka-console-producer.sh --broker-list localhost:9092 --topic test</code></pre><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fyfqzagbuvj31me07cwfr.jpg" alt="">    </p><h3 id="5-启动Consumer"><a href="#5-启动Consumer" class="headerlink" title="5. 启动Consumer"></a>5. 启动Consumer</h3><pre><code>sh kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning</code></pre><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fyfr1m23mqj327o08s0vr.jpg" alt=""></p><p>对于新的kafka版本，可以使用如下的命令</p><pre><code>sh kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</code></pre><h2 id="kafka配置"><a href="#kafka配置" class="headerlink" title="kafka配置"></a>kafka配置</h2><h3 id="broker-配置"><a href="#broker-配置" class="headerlink" title="broker 配置"></a>broker 配置</h3><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><table><thead><tr><th>配置名称</th><th>配置说明</th></tr></thead><tbody><tr><td>broker.id</td><td>broker在集群中的唯一标识</td></tr><tr><td>listeners</td><td>kafka监听的地址，如果没有配置，则使用java.net.InetAddress.getCanonicalHostName()获取的值</td></tr><tr><td>num.network.threads</td><td>处理网络请求的线程数</td></tr><tr><td>num.io.threads</td><td>处理I/O的线程数</td></tr><tr><td>socket.send.buffer.bytes</td><td>发送缓存区的大小</td></tr><tr><td>socket.receive.buffer.bytes</td><td>接收缓冲区的大小</td></tr><tr><td>socket.request.max.bytes</td><td>kafka允许接收或发送消息的最大字节数</td></tr></tbody></table><h4 id="zookeeper-配置"><a href="#zookeeper-配置" class="headerlink" title="zookeeper 配置"></a>zookeeper 配置</h4><table><thead><tr><th>配置名称</th><th>配置说明</th></tr></thead><tbody><tr><td>zookeeper.connect</td><td>zookeeper的连接地址，多个Server间以逗号分隔</td></tr><tr><td>zookeeper.connection.timeout.ms</td><td>连接zookeeper的超时时间</td></tr></tbody></table><h4 id="日志刷新策略"><a href="#日志刷新策略" class="headerlink" title="日志刷新策略"></a>日志刷新策略</h4><table><thead><tr><th>配置名称</th><th>配置说明</th></tr></thead><tbody><tr><td>log.flush.interval.messages</td><td>每次刷新至磁盘的消息数</td></tr><tr><td>log.flush.interval.ms</td><td>在数据被写入到硬盘前的最大时间</td></tr></tbody></table><h4 id="日志持久化策略"><a href="#日志持久化策略" class="headerlink" title="日志持久化策略"></a>日志持久化策略</h4><table><thead><tr><th>配置名称</th><th>配置说明</th></tr></thead><tbody><tr><td>log.retention.hours</td><td>日志保留的最长时间</td></tr><tr><td>log.retention.bytes</td><td>日志最大字节数</td></tr><tr><td>log.segment.bytes</td><td>单个log segment文件的大小</td></tr><tr><td>log.retention.check.interval.ms</td><td>检查log失效的间隔</td></tr></tbody></table><h3 id="producer-配置"><a href="#producer-配置" class="headerlink" title="producer 配置"></a>producer 配置</h3><table><thead><tr><th>配置名称</th><th>配置说明</th></tr></thead><tbody><tr><td>bootstrap.servers</td><td>broker地址</td></tr><tr><td>compression.type</td><td>数据压缩策略，none,gzip,snappy,lz4</td></tr><tr><td>partitioner.class</td><td>处理分区的类，默认根据key的hash分发到对应的分区</td></tr><tr><td>request.timeout.ms</td><td>请求的超时时间</td></tr></tbody></table><h3 id="consumer-配置"><a href="#consumer-配置" class="headerlink" title="consumer 配置"></a>consumer 配置</h3><table><thead><tr><th>配置名称</th><th>配置说明</th></tr></thead><tbody><tr><td>zookeeper.connect</td><td>zookeeper连接地址</td></tr><tr><td>zookeeper.connection.timeout.ms</td><td>zookeeper连接超时时间</td></tr><tr><td>group.id</td><td>消费组id</td></tr><tr><td>consumer.timeout.ms</td><td>消费者超时时间</td></tr></tbody></table><h2 id="kafka脚本参数说明"><a href="#kafka脚本参数说明" class="headerlink" title="kafka脚本参数说明"></a>kafka脚本参数说明</h2><h3 id="kafka-config"><a href="#kafka-config" class="headerlink" title="kafka-config"></a>kafka-config</h3><p>用于查看并修改kafka的配置，–describe 查看配置， –alter 修改配置</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td>entity-type</td><td>配置类型，有topics/clients/users/brokers</td></tr><tr><td>entiey-name</td><td>配置名称，对于topics就是topic的名称</td></tr></tbody></table><p>可以通过以下命令查看可管理的配置</p><pre><code>sh kafka-config.sh --help</code></pre><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fyfuab7stej30u016pdod.jpg" alt="">    </p><h4 id="describe"><a href="#describe" class="headerlink" title="describe"></a>describe</h4><pre><code>sh kafka-configs.sh --zookeeper localhost:2181 --describe --entity-type topics</code></pre><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fyftxq5ao7j320s04g0uv.jpg" alt=""></p><h4 id="alter"><a href="#alter" class="headerlink" title="alter"></a>alter</h4><pre><code>sh kafka-configs.sh --zookeeper localhost:2181 --alter --entity-type topics --entity-name test --add-config retention.ms=600000</code></pre><p>这个时候在看topic test的配置，发现配置已修改</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fyfu4kxpczj321o034wfw.jpg" alt="">    </p><h3 id="kafka-console-consumer"><a href="#kafka-console-consumer" class="headerlink" title="kafka-console-consumer"></a>kafka-console-consumer</h3><p>启动一个consumer</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td>bootstrap-server</td><td>broker地址，localhost:9092</td></tr><tr><td>zookeeper</td><td>zookeeper地址，localhost:2181</td></tr><tr><td>topic</td><td>topic名称</td></tr><tr><td>formatter</td><td>格式化消息的类的名称</td></tr><tr><td>from-beginning</td><td>如果consumer没有设置offset，则从最开始的消息开始消费，而不是最新的数据</td></tr><tr><td>offset</td><td>指定offset的位置，可以是正整数，也可以是earliest/latest，默认是latest</td></tr><tr><td>partition</td><td>指定从哪个partition开始消费数据</td></tr></tbody></table><h3 id="kafka-topics"><a href="#kafka-topics" class="headerlink" title="kafka-topics"></a>kafka-topics</h3><p>创建，删除，修改topic</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td>config</td><td>topic配置</td></tr><tr><td>delete-config</td><td>删除配置</td></tr><tr><td>create</td><td>创建topic</td></tr><tr><td>delete</td><td>删除topic</td></tr><tr><td>partitions</td><td>topic的分区数</td></tr><tr><td>replication-factor</td><td>topic备份的数</td></tr><tr><td>topic</td><td>topic名称</td></tr></tbody></table><h4 id="create-topic"><a href="#create-topic" class="headerlink" title="create topic"></a>create topic</h4><pre><code>sh kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 2 --topic test-topic</code></pre><h4 id="delete-topic"><a href="#delete-topic" class="headerlink" title="delete topic"></a>delete topic</h4><pre><code>sh kafka-topics.sh --delete -zookeeper localhost:2181 --topic test-topic</code></pre><h4 id="describe-topic"><a href="#describe-topic" class="headerlink" title="describe topic"></a>describe topic</h4><pre><code>sh kafka-topics.sh --zookeeper localhost:2181 --describe --topic test-topic</code></pre><h4 id="alter-topic"><a href="#alter-topic" class="headerlink" title="alter topic"></a>alter topic</h4><p>修改partitions和replica的个数，只能增加</p><pre><code>sh kafka-topics.sh --alter -zookeeper localhost:2181 --topic test-topic --partitions 3                </code></pre><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://kafka.apache.org/documentation/#configuration" target="_blank" rel="noopener">https://kafka.apache.org/documentation/#configuration</a></li><li><a href="https://my.oschina.net/u/1757002/blog/868517" target="_blank" rel="noopener">https://my.oschina.net/u/1757002/blog/868517</a></li><li><a href="https://www.jianshu.com/p/f94bb7a70ab6" target="_blank" rel="noopener">https://www.jianshu.com/p/f94bb7a70ab6</a></li><li><a href="https://www.jianshu.com/p/3ed342a28a9d" target="_blank" rel="noopener">https://www.jianshu.com/p/3ed342a28a9d</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kafka—-入门介绍(1)</title>
      <link href="/2018/12/16/kafka-ru-men-jie-shao-1/"/>
      <url>/2018/12/16/kafka-ru-men-jie-shao-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Kafka介绍"><a href="#Kafka介绍" class="headerlink" title="Kafka介绍"></a>Kafka介绍</h2><p>kafka是一个分布式的，基于发布/订阅的消息系统。简单的可以理解kafka是一个消息队列，可以往队列里面写入数据，也可以从队列里面取出数据进行处理。</p><h2 id="kafka关键概念"><a href="#kafka关键概念" class="headerlink" title="kafka关键概念"></a>kafka关键概念</h2><p>我以自来水厂的例子来解释kafka的相关概念，可能不够严谨，只为方便大家理解。</p><p>从前有一家自来水厂(producer)负责把水运输到不同的地方，以供当地的居民(consumer)使用。冬天大家用水较少，但是水厂又一直在送水，导致水浪费了；到了夏天大家用水多，自来水来不及生产，导致居民无水可用。因此需要一个蓄水池(broker),自来水厂将水运输到蓄水池中，居民从蓄水池取水使用。蓄水池通过一个管道(topic)将水运输到不同的小区中</p><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>topic可以理解数据标签，kafka通过topic对数据进行分门别类，就好比上述例子中的管道，使得自来水可以流向不同的地方，而不导致水混在一起。</p><h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><p>生产者，数据的来源，就好比上述例子中自来水厂，水都是从自来水来的。</p><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>消费者，数据的处理者，就好比上述例子中的居民，居民需要取水喝。</p><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><p>数据保存的地方，多个broker构成一个kafka集群。就好比上述例子中的蓄水池，生成者生成的数据都保存在broker中。</p><h2 id="Topic抽象"><a href="#Topic抽象" class="headerlink" title="Topic抽象"></a>Topic抽象</h2><p><img src="http://img.orchome.com:8888/group1/M00/00/01/KmCudlf7DsaAVF0WAABMe0J0lv4158.png" alt=""></p><p>topic是一个大的管道，但是为了提供吞吐量，在管道中有设置了许多小的通道(partition)，也就是分区。每一个分区都是一个<strong>顺序的</strong>，不可变的消息队列，并且可以持续添加。每个分区通过一个唯一的offset来标识消息处理的进度。</p><p>消费者可以控制offset，例如消费可以控制从最新的数据开始消费，即设置offset为new，也可以从最早的数据开始消费，即设置offset为early</p><h2 id="生成者"><a href="#生成者" class="headerlink" title="生成者"></a>生成者</h2><p>生产者负责往某个topic写入数据。由于topic有多个分区，数据可能会按照分区的顺序写入，也可以按照某种算法写入对应的分区，这个可以有开发者自己控制。</p><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><p>消费者负责从topic中读取数据。kafka为消费者提供了一个抽象模型-消费组(consumer group)。消费组可以对应上述例子中小区，每一个居民都是消费者(consumer)，同一个小区的居民就是属于同一个消费组。</p><p>kafka之所以抽象消费组的概念，是为了兼容两种消费模型，队列模型和发布-订阅模型。对于队列来说，一组消费者从同一个服务器消费数据，一个消息只能由一个消费者消费。在发布-订阅模型中，一个消息被广播给所有的消费者。如果所有的消费者都在一个消费组中，则变成了队列模型；如果每一个消费者都在不同的消费组中，则变成了发布-订阅模型。</p><p><img src="http://img.orchome.com:8888/group1/M00/00/01/KmCudlf7D-OAEjy8AABoxGLnMI4173.png" alt=""></p><p>在kafka中，一个分区中的消息只能被同一个消费组中一个消费者消费。例如一个topic中有三个分区p1,p2,p3。消费组groupA，只有一个消费者A1；消费者groupB，有4个消费者，B1,B2,B3,B4。则消费情况可能如下所示，</p><p>对于消费组groupA，</p><table><thead><tr><th>partition</th><th>consumer</th></tr></thead><tbody><tr><td>p1</td><td>A1</td></tr><tr><td>p2</td><td>A1</td></tr><tr><td>p3</td><td>A1</td></tr></tbody></table><p>由于groupA只有一个consumer，所以所有的分区都由这个consumer消费</p><p>对于消费组groupB</p><table><thead><tr><th>partition</th><th>consumer</th></tr></thead><tbody><tr><td>p1</td><td>B1</td></tr><tr><td>p2</td><td>B2</td></tr><tr><td>p3</td><td>B3</td></tr></tbody></table><p>groupB有4个consumer，但是这个topic只有3个partition，所以有一个consumer将消费不到任何数据，除非其中一个consumer挂掉了，剩下空闲的这个consumer才会上位。</p><p><strong>一个partition的数据，只能由一个consumer group的一个consumer消费</strong></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://kafka.apache.org/documentation/" target="_blank" rel="noopener">Apache Kafka</a></li><li><a href="https://www.infoq.cn/article/kafka-analysis-part-1" target="_blank" rel="noopener">Kafka 设计解析（一）：Kafka 背景及架构介绍</a></li><li><a href="http://orchome.com/5#/collapse-1005" target="_blank" rel="noopener">kafka入门介绍</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
